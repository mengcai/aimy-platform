name: AIMY CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test Matrix
  test-matrix:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        package-manager: [npm, pnpm]
        include:
          - node-version: 18.x
            package-manager: pnpm
          - node-version: 20.x
            package-manager: pnpm
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: ${{ matrix.package-manager }}
    
    - name: Install pnpm
      if: matrix.package-manager == 'pnpm'
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm install --frozen-lockfile
        else
          npm ci
        fi
    
    - name: Run linting
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm lint
        else
          npm run lint
        fi
    
    - name: Run type checking
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm type-check
        else
          npm run type-check
        fi
    
    - name: Run unit tests
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm test
        else
          npm test
        fi
    
    - name: Run E2E tests
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm test:e2e
        else
          npm run test:e2e
        fi
    
    - name: Build packages
      run: |
        if [ "${{ matrix.package-manager }}" = "pnpm" ]; then
          pnpm build
        else
          npm run build
        fi

  # Smart Contract Testing with Foundry
  contracts:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build contracts
      run: |
        cd packages/contracts
        forge build
    
    - name: Test contracts
      run: |
        cd packages/contracts
        forge test --verbosity 2 --gas-report
    
    - name: Run Slither analysis
      run: |
        pip install slither-analyzer
        cd packages/contracts
        slither . --json slither-report.json || true
    
    - name: Upload Slither report
      uses: actions/upload-artifact@v4
      with:
        name: slither-report-${{ github.run_id }}
        path: packages/contracts/slither-report.json
        retention-days: 30

  # Security Analysis
  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
    
    - name: Run dependency check
      run: pnpm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Docker Build and Publish
  docker:
    runs-on: ubuntu-latest
    needs: [test-matrix, contracts, security]
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push web app
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push console app
      uses: docker/build-push-action@v5
      with:
        context: ./apps/console
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/console:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push gateway service
      uses: docker/build-push-action@v5
      with:
        context: ./services/gateway
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/gateway:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push AI core service
      uses: docker/build-push-action@v5
      with:
        context: ./services/ai-core
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-core:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push compliance service
      uses: docker/build-push-action@v5
      with:
        context: ./services/compliance
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/compliance:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push settlement service
      uses: docker/build-push-action@v5
      with:
        context: ./services/settlement
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/settlement:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push liquidity service
      uses: docker/build-push-action@v5
      with:
        context: ./services/liquidity
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/liquidity:${{ steps.meta.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration:
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Start services
      run: |
        docker-compose up -d postgres redis minio
        sleep 30
    
    - name: Run integration tests
      run: pnpm test:integration
      env:
        DATABASE_URL: postgresql://aimy_user:aimy_password@localhost:5432/aimy
        REDIS_URL: redis://:aimy_redis_password@localhost:6379
        MINIO_ENDPOINT: http://localhost:9000
        MINIO_ACCESS_KEY: aimy_minio_user
        MINIO_SECRET_KEY: aimy_minio_password
    
    - name: Stop services
      if: always()
      run: docker-compose down

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    needs: [docker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run performance tests
      run: pnpm test:performance
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ github.run_id }}
        path: performance-report.json
        retention-days: 30
